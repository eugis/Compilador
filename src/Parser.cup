import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

parser code {:
  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex,sf);
    lexer = lex;
  }
:};

terminal         SEMICOLON, COMMA, LPAR, RPAR, BEGIN, END, IF;
terminal ELSE, WHILE, READ, WRITE, BUNOP, ASSIGN, FOR, BREAK, CONTINUE;
terminal Integer TYPE, BINOP1, BINOP2, ASSBINOP, UNOP, COMP, BBINOP, INTCONST;
terminal String  IDENT,STRINGCONST;
terminal Boolean BOOLCONST;

non terminal Program        program;
non terminal List<Declaration>     decllist;
non terminal Declaration           decl;
non terminal List<Statement>     stmtlist;
non terminal List<Expression.Identifier>   identlist;
non terminal Statement           stmt;
non terminal Expression           expr;
non terminal Condition           cond;

precedence left BINOP2;
precedence left BINOP1;
precedence left ELSE, BUNOP, BBINOP, UNOP;

program   ::=  decllist:d stmtlist:s                        {: RESULT = new Program(d,s); :}
    ;
decllist  ::=  decl:d decllist:dl                           {: dl.add(d); RESULT = dl; :}
    | /* empty decllist */                                  {: RESULT = new LinkedList<Declaration>(); :}
    ;
stmtlist  ::= stmtlist:sl stmt:s                            {: sl.add(s); RESULT = sl; :}
    | /* empty stmtlist */                                  {: RESULT = new LinkedList<Statement>(); :}
    ;
decl ::= TYPE IDENT:i identlist:il  SEMICOLON               {: il.add(0,Expression.ident(ixleft,i,ixright));
                                                               RESULT = new Declaration(il); :}
    ;
identlist  ::= identlist:il COMMA IDENT:i                   {: il.add(Expression.ident(ixleft,i,ixright)); RESULT = il; :}
    | /* empty identlist*/                                  {: RESULT = new LinkedList<Expression.Identifier>(); :}
    ;
stmt ::= SEMICOLON                                          {: RESULT = Statement.empty(); :}
    | BEGIN stmtlist:sl END                                 {: RESULT = Statement.compound(sl); :}
    | IDENT:i UNOP:op                                       {: RESULT = Statement.assunop(i, op); :}
    | UNOP:op IDENT:i                                       {: RESULT = Statement.assunop(i, op); :}
    | IDENT:i ASSBINOP:op expr:e                            {: RESULT = Statement.assbinop(i, op, e); :}
    | IDENT:i ASSIGN expr:e SEMICOLON                       {: RESULT = Statement.assign(ixleft,i,e,ixright); :}
    | IDENT:i ASSIGN READ LPAR RPAR SEMICOLON               {: RESULT = Statement.read(ixleft,i,ixright); :}
    | IDENT:i ASSIGN READ LPAR STRINGCONST:s RPAR SEMICOLON {: RESULT = Statement.read(ixleft,i,s,ixright); :}
    | WRITE LPAR expr:e RPAR SEMICOLON                      {: RESULT = Statement.write(e); :}
    | WRITE LPAR STRINGCONST:s RPAR SEMICOLON               {: RESULT = Statement.write(s); :}
    | IF LPAR cond:c RPAR stmt:s                            {: RESULT = Statement.ifthen(c,s); :}
    | IF LPAR cond:c RPAR stmt:t ELSE stmt:e                {: RESULT = Statement.ifthenelse(c,t,e); :}
    | WHILE LPAR cond:c RPAR stmt:s                         {: RESULT = Statement.whileloop(c,s); :}
    | FOR LPAR IDENT:i ASSIGN expr:e SEMICOLON cond:c SEMICOLON stmt:f RPAR stmt:s
                                                            {: RESULT = Statement.forloop((Statement.Assign)Statement.assign(null,i,e,null),c,f,s); :}
    | BREAK SEMICOLON                                       {: RESULT = Statement.breakst(); :}
    | CONTINUE SEMICOLON                                    {: RESULT = Statement.continuest(); :}
    | error:e                                               {: parser.report_error("Syntax error, skip rest",e); :}
    ;
cond ::= BOOLCONST:c                                        {: RESULT = Condition.boolconst(c); :}
    | LPAR cond:c RPAR                                      {: RESULT = Condition.priority(c); :}
    | expr:e1 COMP:op expr:e2                               {: RESULT = Condition.binop(e1,op,e2); :}
    | BUNOP cond:c                                          {: RESULT = Condition.unop(c); :}
    | cond:c1 BBINOP:op cond:c2                             {: RESULT = Condition.binop(c1,op,c2); :}
    ;
expr ::= IDENT:i                                            {: RESULT = Expression.ident(ixleft,i,ixright); :}
    | INTCONST:c                                            {: RESULT = Expression.intconst(c); :}
    | LPAR expr:e RPAR                                      {: RESULT = Expression.priority(e); :}
    | BINOP2:op expr:e                                      {: RESULT = Expression.unop(e); :}
    | IDENT:i UNOP:op                                        {: RESULT = Expression.unop(i, op); :}
    | UNOP:op IDENT:i                                        {: RESULT = Expression.unop(i, op, false); :}
    | expr:e1 BINOP1:op expr:e2                              {: RESULT = Expression.binop(e1,op,e2); :}
    | expr:e1 BINOP2:op expr:e2                              {: RESULT = Expression.binop(e1,op,e2); :}
    ;